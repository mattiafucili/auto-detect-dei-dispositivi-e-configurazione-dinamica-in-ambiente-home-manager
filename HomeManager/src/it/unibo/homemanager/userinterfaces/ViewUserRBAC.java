/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ViewUserRBAC.java
 *
 * Created on 29-set-2009, 22.16.49
 */

package it.unibo.homemanager.userinterfaces;


import alice.tucson.api.*;
import alice.logictuple.*;
import it.unibo.homemanager.tablemap.User;
import java.util.List;
import java.util.Vector;
/**
 *
 * @author Administrator
 */
public class ViewUserRBAC extends javax.swing.JPanel {

    private MainPanel mp;
    private TucsonTupleCentreId rbac, casa;
    private User user;
    private Vector activeRoles;
    
    private TucsonAgentId agent;
    
    /** Creates new form ViewUserRBAC */
    public ViewUserRBAC(MainPanel mp, TucsonTupleCentreId rbac_tc, TucsonTupleCentreId casa_tc) {
        this.mp = mp;
        activeRoles = new Vector();
        this.rbac = rbac_tc;
        this.casa = casa_tc;
        try {
            agent = new TucsonAgentId("viewUserRBACAgent");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        initComponents();
    }

/*    private void activate_role(String role) {
        try {
            LogicTuple lt = ctx.inp(rbac, new LogicTuple("rd_all", new Value("active_role", new Value(this.user.idUser), new Var("X")), new Var("Y")));
            if (lt != null) {
                //Lista dei ruoli attivi dell'utente
                List l = lt.getArg(1).toList();
                Vector roles_ac = new Vector();
                for(int i=0;i<l.size();i++){
                    LogicTuple ra = LogicTuple.parse(l.get(i).toString());
                    String role_a = ra.getArg(1).getName();
                    lt = LogicTuple.parse(l.get(i).toString());
                    if(lt.getArg(1).getName().equals(role)){
                        javax.swing.JOptionPane.showMessageDialog(null,"ERROR: selected role "+role+" is already active!",
                    "",javax.swing.JOptionPane.ERROR_MESSAGE);
                        break;
                }
                    else
                        roles_ac.add(lt.getArg(1).getName());
                }
                    
                    
                        lt = ctx.inp(rbac, new LogicTuple("rd_all", new Value("role_set_dsd", new Var("Z"), new Var("X")), new Var("Y")));
                        //lista dei role_set_ssd
                        List l1 = lt.getArg(1).toList();
                        for(int j=0;j<l1.size();j++){
                            LogicTuple lt2 = LogicTuple.parse(l1.get(j).toString());
                            String rs_name = lt2.getArg(0).getName();
                            List l3 = lt2.getArg(1).toList();
                            if(l3.contains(role)){
                                int h=0;
                                int k=1;
                                while(j<roles_ac.size()){
                                    if(l3.contains(roles_ac.get(j)))
                                        k++;
                                    h++;
                            }
                                lt = ctx.rdp(this.rbac, new LogicTuple("dsd", new Value(rs_name), new Var("Y")));
                                int card = lt.getArg(1).intValue();
                                if(k>card){
                                        javax.swing.JOptionPane.showMessageDialog(null,"ERROR: DSD RULE "+rs_name+" violated: ACTIVE ROLES > "+card,
                                            "", javax.swing.JOptionPane.ERROR_MESSAGE);
                                    break;
                                }
                        }
                     }
                        ctx.out(rbac, new LogicTuple("active_role", new Value(this.user.idUser), new Value(role)));
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList_AvRole = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_Roles = new javax.swing.JList();
        jToggleButton1 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_Associations = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList_Rules = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jLabel_User = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setPreferredSize(new java.awt.Dimension(538, 343));

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Role(s) Available"));

        jList_AvRole.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jList_AvRole);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Active Role(s)"));

        jList_Roles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList_Roles.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_RolesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList_Roles);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                .addContainerGap())
        );

        jToggleButton1.setText("ACTIVATE");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jButton1.setText("MENU");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("LOGOUT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList_Associations.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList_Associations.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList_AssociationsValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList_Associations);

        jLabel1.setText("Permission:");

        jScrollPane4.setViewportView(jList_Rules);

        jLabel2.setText("Rules:");

        jButton3.setText("DEACTIVATE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel_User.setFont(new java.awt.Font("Courier New", 1, 14));

        jButton4.setText("SET ACT.DEFAULT");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel_User, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(59, 59, 59))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 340, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jToggleButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton4)))
                        .addGap(68, 68, 68))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton2))
                    .addComponent(jLabel_User, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jButton3))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, 0, 0, Short.MAX_VALUE))
                .addGap(45, 45, 45))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void init(User u){
        this.user = u;
        this.jLabel_User.setText("Politica RBAC di "+ this.user.firstname);
        this.activeRoles.clear();
        this.jList_Roles.setListData(activeRoles);
        this.jList_AvRole.setListData(activeRoles);
        fillListAss();
        fillListAssDisp();
//        fillRoomConstr();
//        fillListRoles();
//        fillListRooms();
//        fillListPerms();
//        fillListRoles();
    }

    protected void hidePanel() {
        if(isVisible())
            setVisible(false);
    }

    private void fillListAssRP(){
        List<LogicTuple> rolesPerm;
        String role = this.jList_Roles.getSelectedValue().toString();
        Vector rolesPermVector = new Vector();
        try {
            EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);
            ITucsonOperation op_rdAll = acc.rdAll(this.rbac, new LogicTuple("ass_roles_perm", new Var("X"), new Var("Y")), null);
            rolesPerm = op_rdAll.getLogicTupleListResult();
            System.err.println("ass. roles-perm: "+rolesPerm);
            
            for(int i=0;i<rolesPerm.size();i++)
                if(rolesPerm.get(i).getArg(0).getName().equals(role))
                    rolesPermVector.add(rolesPerm.get(i).getArg(1).getName());

            this.jList_Associations.setListData(rolesPermVector);
            acc.exit();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/*      private void fillDevConstr() {
        List roles;
        Vector ro = new Vector();

        String association = this.jList_Associations.getSelectedValue().toString();
        String role = this.jList_Roles.getSelectedValue().toString();
        try {
//            TupleArgument[] ta = new TupleArgument[9];
//            for(int i=0;i<ta.length;i++){
//                ta[i] = new Var();
//            }
                LogicTuple rl = ctx.inp(this.rbac, new LogicTuple("rd_all",
                        new Value("dev_rule", new Var("A"), new Var("B"), new Var("C"),
                        new Var("D"), new Var("E"), new Var("F"), new Var("G")),
                        new Var("Z")));
                System.err.println("ass. roles-perm: "+rl);
                roles = rl.getArg(1).toList();
                String ass = "";

                LogicTuple rol;
                for(int i=0;i<roles.size();i++)
                {

                    rol = LogicTuple.parse(roles.get(i).toString());
                    if(rol.getArg(1).getName().equalsIgnoreCase(association) && rol.getArg(2).getName().equalsIgnoreCase(role))
                        ro.add(rol);
//
//                    ass = String.valueOf(rol.getArg(0).intValue());
//                    ass += "-";
//                    ass += rol.getArg(1).getName();
//                    ro.add(ass);
//                    ass = "";
                }
                if(!ro.isEmpty()){
                    this.jList_Rules.setListData(ro);
                }
                else{
                  rl = ctx.inp(this.rbac, new LogicTuple("rd_all",
                        new Value("room_rule", new Var("A"), new Var("B"), new Var("C"),
                        new Var("D"), new Var("E"), new Var("F"), new Var("G")),
                        new Var("Z")));
                System.err.println("ass. roles-perm: "+rl);
                roles = rl.getArg(1).toList();
                ass = "";


                for(int i=0;i<roles.size();i++)
                {

                    rol = LogicTuple.parse(roles.get(i).toString());
                    if(rol.getArg(1).getName().equalsIgnoreCase(association) && rol.getArg(2).getName().equalsIgnoreCase(role))
                        ro.add(rol);
//
//                    ass = String.valueOf(rol.getArg(0).intValue());
//                    ass += "-";
//                    ass += rol.getArg(1).getName();
//                    ro.add(ass);
//                    ass = "";
                }
                if(!ro.isEmpty()){
                    this.jList_Rules.setListData(ro);
                }
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
    }*/

    private void fillRoomConstr() {
        List<LogicTuple> roomRules;
        Vector roomRuleVector = new Vector();
        //String association = this.jList_Associations.getSelectedValue().toString();
        String role = this.jList_Roles.getSelectedValue().toString();
        try {
            EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);
            ITucsonOperation op_rdAll = acc.rdAll(this.rbac,
                    new LogicTuple("room_rule",
                            new Var("A"),
                            new Var("B"),
                            new Value(role),//new Var("C"),
                            new Var("D"),
                            new Var("E"),
                            new Var("F"),
                            new Var("G")),
                        Long.MAX_VALUE);
            roomRules = op_rdAll.getLogicTupleListResult();
            System.err.println("room_rule: "+roomRules);

            for(int i=0;i<roomRules.size();i++)
                roomRuleVector.add(roomRules.get(i));
            
            this.jList_Rules.setListData(roomRuleVector);
            acc.exit();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
/*        List roles;
        Vector ro = new Vector();
        String association = this.jList_Associations.getSelectedValue().toString();
        String role = this.jList_Roles.getSelectedValue().toString();
        try {
//            TupleArgument[] ta = new TupleArgument[9];
//            for(int i=0;i<ta.length;i++){
//                ta[i] = new Var();
//            }
                LogicTuple rl = ctx.inp(this.rbac, new LogicTuple("rd_all",
                        new Value("room_rule", new Var("A"), new Var("B"), new Var("C"),
                        new Var("D"), new Var("E"), new Var("F"), new Var("G")),
                        new Var("Z")));
                System.err.println("ass. roles-perm: "+rl);
                roles = rl.getArg(1).toList();
                String ass = "";

                LogicTuple rol;
                for(int i=0;i<roles.size();i++)
                {

                    rol = LogicTuple.parse(roles.get(i).toString());
                    if(rol.getArg(1).getName().equals(association) && rol.getArg(2).getName().equals(association))
                        ro.add(rol);
//
//                    ass = String.valueOf(rol.getArg(0).intValue());
//                    ass += "-";
//                    ass += rol.getArg(1).getName();
//                    ro.add(ass);
//                    ass = "";
                }
                if(ro.isEmpty()){
                    this.fillDevConstr();
                }else
                this.jList_Rules.setListData(ro);
        } catch (Exception ex) {
            ex.printStackTrace();
        }*/
    }


    private void fillListAss(){
        List<LogicTuple> roles;
        try {
            EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);

            ITucsonOperation op_rdAll = acc.rdAll(this.rbac, new LogicTuple("active_role", new Value(this.user.idUser), new Var("Y")), null);
            roles = op_rdAll.getLogicTupleListResult();
            System.err.println("ass. users-roles: "+roles);

            for(int i=0;i<roles.size();i++)
                activeRoles.add(roles.get(i).getArg(1).getName());
            
            this.jList_Roles.setListData(activeRoles);
            acc.exit();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void fillListAssDisp(){
        List<LogicTuple> roles;
        Vector availableRoles = new Vector();
        try {
            EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);
            ITucsonOperation op_rdAll = acc.rdAll(this.rbac, new LogicTuple("ass_user_roles", new Value(this.user.idUser), new Var("Y")), null);
            roles = op_rdAll.getLogicTupleListResult();
            System.err.println("ass. users-roles: "+roles);

            for(int i=0;i<roles.size();i++)
                if(!this.activeRoles.contains(roles.get(i).getArg(1).getName()))
                        availableRoles.add(roles.get(i).getArg(1).getName());
            
            this.jList_AvRole.setListData(availableRoles);
            acc.exit();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.mp.loadInitRolePanel(user);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jList_RolesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_RolesValueChanged
        // TODO add your handling code here:
        if(!this.jList_Roles.isSelectionEmpty())
            fillListAssRP();
    }//GEN-LAST:event_jList_RolesValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.mp.logOut(evt);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList_AssociationsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList_AssociationsValueChanged
        // TODO add your handling code here:
        if(!this.jList_Associations.isSelectionEmpty())
            this.fillRoomConstr();
    }//GEN-LAST:event_jList_AssociationsValueChanged

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(!jList_Roles.isSelectionEmpty()) {
            try {
                EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);
                acc.out(casa, new LogicTuple("deactivate_req", new Value(this.user.idUser), new Value(this.jList_Roles.getSelectedValue().toString())), null);
                acc.exit();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        if(!this.jList_AvRole.isSelectionEmpty()) {
            try {
                EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);
                acc.out(casa, new LogicTuple("activate_req", new Value(this.user.idUser), new Value(this.jList_AvRole.getSelectedValue().toString())), null);
                acc.exit();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if(!this.jList_Roles.isSelectionEmpty())
            set_default_act(this.jList_Roles.getSelectedValue().toString());
    }//GEN-LAST:event_jButton4ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel_User;
    private javax.swing.JList jList_Associations;
    private javax.swing.JList jList_AvRole;
    private javax.swing.JList jList_Roles;
    private javax.swing.JList jList_Rules;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables


//    private void deactivate_role(String toString) {
//        try{
//            if(this.jList_Roles.getVisibleRowCount()-1!=0){
//            LogicTuple lt = ctx.inp(rbac, new LogicTuple("active_role", new Value(this.user.idUser), new Value(toString)));
//            if(lt ==null){
//               javax.swing.JOptionPane.showMessageDialog(null,"ERROR: selected role "+toString+" is not active!",
//                    "",javax.swing.JOptionPane.ERROR_MESSAGE);
//            }
//            }else
//                javax.swing.JOptionPane.showMessageDialog(null,"ERROR: it must be one active role at least!",
//                    "",javax.swing.JOptionPane.ERROR_MESSAGE);
//        }catch(Exception ex){
//            ex.printStackTrace();
//        }
//    }

    private void set_default_act(String role) {
        try{
            EnhancedSynchACC acc = TucsonMetaACC.getContext(agent);
            ITucsonOperation op_rdp = acc.rdp(rbac, new LogicTuple("default_activate", new Value(this.user.idUser), new Value(role)), null);
            if(op_rdp.isResultSuccess())
                javax.swing.JOptionPane.showMessageDialog(null,"ERROR: default active role already selected!",
                    "",javax.swing.JOptionPane.ERROR_MESSAGE);
            else{
                acc.inp(rbac, new LogicTuple("default_activate", new Value(this.user.idUser), new Var("Y")), Long.MAX_VALUE);
                acc.out(rbac, new LogicTuple("default_activate", new Value(this.user.idUser), new Var(role)), null);
            }
            acc.exit();
        }catch(Exception ex){
            ex.printStackTrace();
        }
    }

}
